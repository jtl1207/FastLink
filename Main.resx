<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        RU5ErkJggg==
</value>
  </data>
</root>